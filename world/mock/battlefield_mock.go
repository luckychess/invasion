// Code generated by MockGen. DO NOT EDIT.
// Source: world/battlefield.go

// Package mock_world is a generated GoMock package.
package mock_world

import (
	rand "math/rand"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	world "github.com/luckychess/invasion/world"
)

// MockWorldMap is a mock of WorldMap interface.
type MockWorldMap struct {
	ctrl     *gomock.Controller
	recorder *MockWorldMapMockRecorder
}

// MockWorldMapMockRecorder is the mock recorder for MockWorldMap.
type MockWorldMapMockRecorder struct {
	mock *MockWorldMap
}

// NewMockWorldMap creates a new mock instance.
func NewMockWorldMap(ctrl *gomock.Controller) *MockWorldMap {
	mock := &MockWorldMap{ctrl: ctrl}
	mock.recorder = &MockWorldMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldMap) EXPECT() *MockWorldMapMockRecorder {
	return m.recorder
}

// AddAlien mocks base method.
func (m *MockWorldMap) AddAlien(alien *world.Alien) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlien", alien)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAlien indicates an expected call of AddAlien.
func (mr *MockWorldMapMockRecorder) AddAlien(alien interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlien", reflect.TypeOf((*MockWorldMap)(nil).AddAlien), alien)
}

// AddCity mocks base method.
func (m *MockWorldMap) AddCity(name, east, north, west, south string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCity", name, east, north, west, south)
}

// AddCity indicates an expected call of AddCity.
func (mr *MockWorldMapMockRecorder) AddCity(name, east, north, west, south interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCity", reflect.TypeOf((*MockWorldMap)(nil).AddCity), name, east, north, west, south)
}

// DestroyCity mocks base method.
func (m *MockWorldMap) DestroyCity(cityToDestroy string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DestroyCity", cityToDestroy)
}

// DestroyCity indicates an expected call of DestroyCity.
func (mr *MockWorldMapMockRecorder) DestroyCity(cityToDestroy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyCity", reflect.TypeOf((*MockWorldMap)(nil).DestroyCity), cityToDestroy)
}

// GetAliens mocks base method.
func (m *MockWorldMap) GetAliens() map[string]*world.Alien {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliens")
	ret0, _ := ret[0].(map[string]*world.Alien)
	return ret0
}

// GetAliens indicates an expected call of GetAliens.
func (mr *MockWorldMapMockRecorder) GetAliens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliens", reflect.TypeOf((*MockWorldMap)(nil).GetAliens))
}

// GetCities mocks base method.
func (m *MockWorldMap) GetCities() map[string]*world.City {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCities")
	ret0, _ := ret[0].(map[string]*world.City)
	return ret0
}

// GetCities indicates an expected call of GetCities.
func (mr *MockWorldMapMockRecorder) GetCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCities", reflect.TypeOf((*MockWorldMap)(nil).GetCities))
}

// MoveAlien mocks base method.
func (m *MockWorldMap) MoveAlien(alien *world.Alien, rng *rand.Rand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveAlien", alien, rng)
}

// MoveAlien indicates an expected call of MoveAlien.
func (mr *MockWorldMapMockRecorder) MoveAlien(alien, rng interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveAlien", reflect.TypeOf((*MockWorldMap)(nil).MoveAlien), alien, rng)
}
